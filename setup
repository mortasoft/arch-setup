#!/bin/bash

#Default Keyboard
default_keyboard="us"

# System Locale
LOCALE="en_US.UTF-8"

# Zone
ZONE="America/Costa_Rica"

# Hostname
HOST_NAME="arch"

# Root Password
root_passwd="123456.."

# User Information
FULL_NAME="Mario Zamora Madriz"
USER_NAME="mortasoft"
user_passwd="123456.."

# GUI
GUI="KDE Plasma"

# Load the configuration file
init() {
  DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  source "$DIR"/etc/setup.conf
  clear ; setfont Lat2-Terminus16.psfu.gz
  dialog --title "Welcome to the Mortasoft Arch Linux Installer" \
    --ok-label "Begin Installation" --msgbox "Default Options:\n \
    Keymap: $default_keyboard \n \
    Locale: $LOCALE \n \
    Zone: $ZONE \n \
    Hostname: $HOST_NAME \n \
    Root Password: $root_passwd \n \
    User Full Name: $FULL_NAME \n \
    Username: $USER_NAME \n \
    User Password: $user_passwd \n \
    GUI: $GUI" 20 70 

}

# Proceed with installation only if there is an internet connection
check_connection() {
  dialog --infobox "Checking internet connection..." 3 50
  # Check if a web page is available
  if ! nc -zw1 archlinux.org 443; then
    dialog --title "Connect to the Internet" \
      --msgbox "The installer was unable to detect a working internet \
connection. The installation media supports wired network devices on \
boot. Make sure the cable is plugged in. Wireless users should use the \
'iwctl' command to connect to a wireless connection.\n\nOnce you have \
a working internet connection, retry running the installer." 10 80
    reset ; exit 1
  fi
}

# Set the keyboard layout
set_keymap() {
  dialog --infobox "Setting keymap to $default_keyboard..." 3 50
  localectl set-keymap $default_keyboard
  loadkeys $default_keyboard
}

# Set the system locale
set_locale() { 
  locales=("en_US.UTF-8" "es_CR.UTF-8")

  for i in "${locales[@]}"
  do
    sed -i -e "/$i*/s/^#//" /etc/locale.gen
  done

}

# Prompt the user to set the system time zone
set_timezone() {
  timedatectl set-ntp true
  utc_enabled=true
  
}    

# Check and disable any active mountpoints
check_mountpoints() {
  if mountpoint -q /mnt; then
    dialog --infobox "Unmounting active mountpoints on $DISK..." 3 50
    umount -R /mnt
  fi

  if free | awk '/^Swap:/ {exit !$2}'; then
    swapoff -a
  fi
}

# Check for LVM on the system to avoid conflicts
check_lvm_status() {
  # Check for an existing volume group on the selected disk
  if vgs --noheading --nosuffix -o pv_name | grep -q "$DISK"; then
    vg_on_pv=$(pvs -o pv_name,vg_name | grep "$DISK" | awk '{print $2}')
    dialog --title "WARNING: LVM Exists on $DISK" \
      --yesno "A volume group ($vg_on_pv) was detected on the selected disk \
($DISK).\n\nIn order to proceed, the volume group ($vg_on_pv) needs to be \
removed and all data will be lost!\n\nAre you sure you want to remove the \
volume group '$vg_on_pv'?" 11 75
    if [ $? -eq 0 ]; then
      dialog --infobox "Removing $vg_on_pv from $DISK..." 3 50
      vgchange -y -an "$vg_on_pv" &> /dev/null
      vgremove -y "$vg_on_pv" &> /dev/null
    else
      dialog --title "ERROR: Unable to Partition $DISK" \
        --msgbox "The installer can't proceed while LVM is active on \
$DISK.\n\nIf you have any active LVM devices, please make sure they are not in \
use and backup any data on the volume group before running the installer." 8 80
      reset ; exit 1
    fi
  fi

  # Check for a volume group with the same name on the system when creating LVM
  if [ "$PARTITION_LAYOUT" != "Basic" ]; then
    if vgs "$LVM_GROUP" &> /dev/null; then
      dialog --title "WARNING: LVM Volume Group Exists" \
        --yesno "A volume group with the name '$LVM_GROUP' already exists on \
your system.\n\nIn order to proceed, the volume group ($LVM_GROUP) needs to be \
overwritten and all data will be lost!\n\nAre you sure you want to overwrite \
the volume group '$LVM_GROUP'?" 11 80
      if [ $? -eq 0 ]; then
        dialog --infobox "Removing $LVM_GROUP from $DISK..." 3 50
        vgchange -y -an "$LVM_GROUP" &> /dev/null
        vgremove -y "$LVM_GROUP" &> /dev/null
      else
        dialog --title "ERROR: Unable to Partition $DISK" \
          --msgbox "The installer can't partition the disk because a volume \
group with the name '$LVM_GROUP' already exists on your system.\n\nIf you have \
any active LVM devices, please make sure they are not in use and backup any \
data on the volume group before running the installer." 9 80
        reset ; exit 1
      fi
    fi
  fi
}

# Prepare the user's selected disk for partitioning
prepare_disk() {
  SWAP="-"
  swap_enabled=false
  block_devices=()
  # List all available block devices excluding 'rom' and 'loop'
  for device in $(lsblk -d -n -p -r -e 7,11 -o NAME); do
    device_size=$(lsblk -d -n -r -o SIZE "$device")
    block_devices+=("$device" "$device_size")
  done

  check_mountpoints
  while true; do
    PARTITION_LAYOUT=$(dialog --title "Partition the Disks" \
      --cancel-label "Exit to Menu" \
      --menu "The installer will now automatically partition a disk for you. \
If you have no preference or are unsure about which partition layout to \
choose, the 'Basic' layout is the simplest and should be enough for most use \
cases.\n\nPartition layout:" 14 80 3 \
"Basic" "Use entire disk" \
"LVM" "Use entire disk and set up LVM" \
"Encrypted" "Use entire disk and set up encrypted LVM" 3>&1 1>&2 2>&3)

    if [ $? -eq 0 ]; then
      DISK=$(dialog --title "Set the Installation Disk" --cancel-label "Back" \
        --menu "Select the disk for Arch Linux to be installed on. Note that \
the disk you select will be erased, but not until you have confirmed the \
changes.\n\nDisk to partition:" 16 55 5 \
"${block_devices[@]}" 3>&1 1>&2 2>&3)

      if [ $? -eq 0 ]; then
        # NVME devices use nvme0n1p1, p2, p3 etc. for partition naming
        # TODO: May need to be modified to support installing on other block
        # devices (SD cards, USB?)
        PREFIX=""
        if [[ "$DISK" == *"nvme"* ]]; then
          PREFIX="p"
        fi

        FILE_SYSTEM=$(dialog --title "Set the Filesystem for $DISK_ROOT" \
          --nocancel --menu "Select the type of filesystem to use for the \
specified device. If you are unsure, 'ext4' is the default.\n\nFilesystem \
type:" 15 68 5 \
"ext4" "Ext4 journaling filesystem" \
"ext3" "Ext3 journaling filesystem" \
"ext2" "Standard Linux Ext2 filesystem" \
"btrfs" "Btrfs Copy-on-Write B-tree filesystem" \
"xfs" "SGI's journaling filesystem" 3>&1 1>&2 2>&3)

        dialog --title "Create a Swap Partition" \
          --yesno "Would you like to create an optional swap partition? If \
you are unsure, it is recommended to create one." 6 57
        if [ $? -eq 0 ]; then
          # Get the amount of RAM in the system to use as default swap size
          mem_total=$(free --giga | awk '/^Mem:/{print $2}')
          if [ "$mem_total" != "0" ]; then
            mem_total="${mem_total}G"
          else
            mem_total=$(free --mega | awk '/^Mem:/{print $2}')
            mem_total="${mem_total}M"
          fi

          while true; do
            SWAP=$(dialog --title "Allocate Swap Space" \
              --inputbox "Specify how much swap space to allocate. If you are \
unsure, the default is to have swap space equal to the amount of RAM in your \
system.\n\nSwap partition size (use 'M' for MiB or 'G' for GiB):" 11 80 \
"$mem_total" 3>&1 1>&2 2>&3)

            if [ $? -eq 0 ]; then
              disk_size_bytes=$(lsblk -b -d -n -o SIZE "$DISK")
              disk_size_mibs=$((disk_size_bytes/1024/1024))
              disk_size_gibs=$((disk_size_mibs/1024))
              swap_size=$(printf "%s" "$SWAP" | tr -c -d '[:digit:]')

              # Input validation for swap size
              if printf "%s" "$SWAP" | grep -Eoq "^[0-9]+[MG]$" \
                && [ "${swap_size:0:1}" != "0" ]; then
                if [ "${SWAP: -1}" = "M" ] \
                  && [ "$swap_size" -lt $((disk_size_mibs - 2048)) ]; then
                  swap_enabled=true
                  break
                elif [ "${SWAP: -1}" = "G" ] \
                  && [ "$swap_size" -lt $((disk_size_gibs - 2)) ]; then
                  swap_enabled=true
                  break
                else
                  dialog --title "ERROR: Not Enough Disk Space" \
                    --msgbox "The amount you entered exceeds the amount of \
space available on the disk. Note that the installer sets aside an additional \
2 GiB to have enough space for the base installation." 8 60
                fi
              else
                dialog --title "ERROR: Invalid Format" \
                  --msgbox "You entered an invalid format. Make sure to use \
'M' for 'MiB' or 'G' for 'GiB'." 6 60
              fi
            else
              break
            fi
          done
        fi

        dialog --title "Confirm the Partition Layout for $DISK" --defaultno \
          --yesno "WARNING: All data on the selected disk will be lost! Make \
sure to review your changes before continuing.\n\nDisk to partition: \
$DISK\nPartition layout: $PARTITION_LAYOUT\nFilesystem type: \
$FILE_SYSTEM\nSwap size: $SWAP\n\nAre you sure you want to write the \
changes to the disk?" 13 60
        if [ $? -eq 0 ]; then
          check_lvm_status
          dialog --infobox "Formatting $DISK..." 3 50
          sgdisk --zap-all "$DISK" &> /dev/null
          wipefs -a "$DISK" &> /dev/null
          dialog --infobox "Partitioning $DISK..." 3 50
          create_partition_label
          case "$PARTITION_LAYOUT" in
            "Basic") create_basic_layout ;;
            "LVM") create_lvm_layout ;;
            "Encrypted") create_encrypted_layout ;;
          esac
          break
        else
          main_menu
        fi
      fi
    else
      main_menu
    fi
  done
}

# Create a new partition label on the selected disk
create_partition_label() {
  # UEFI systems use GPT partitioning and BIOS/CSM systems use MBR
  if $UEFI; then
    parted -s "$DISK" mklabel gpt &> /dev/null
  else
    parted -s "$DISK" mklabel msdos &> /dev/null
  fi
  if [ $? -ne 0 ]; then
    dialog --title "ERROR: Unable to Partition $DISK" \
      --msgbox "The installer encountered an error while partitioning \
$DISK.\n\nMake sure the disk you selected is not active before running the \
installer. If this error keeps occuring, please reboot your machine and try \
again." 8 80
    reset ; exit 1
  fi
}

# Partition the selected disk where everything is installed on one partition
create_basic_layout() {
  if $UEFI; then
    BOOT_PART="${DISK}${PREFIX}1"
    ROOT_PART="${DISK}${PREFIX}2"
    if $swap_enabled; then
      SWAP_PART="${DISK}${PREFIX}3"
      sgdisk -n 1:0:+512M -n 2:0:-"$SWAP" -n 3:-"$SWAP":-0 \
        -t 1:ef00 -t 2:8300 -t 3:8200 "$DISK" &> /dev/null
      mkswap "$SWAP_PART" &> /dev/null
      swapon "$SWAP_PART"
    else
      sgdisk -n 1:0:+512M -n 2:0:0 -t 1:ef00 -t 2:8300 "$DISK" &> /dev/null
    fi
    mkfs.fat -F32 "$BOOT_PART" &> /dev/null
  else
    ROOT_PART="${DISK}${PREFIX}1"
    if $swap_enabled; then
      SWAP_PART="${DISK}${PREFIX}2"
      echo -e "n\np\n1\n\n-${SWAP}\nn\np\n2\n\n\nt\n2\n82\nw" \
        | fdisk "$DISK" &> /dev/null
      mkswap "$SWAP_PART" &> /dev/null
      swapon "$SWAP_PART"
    else
      echo -e "n\np\n1\n\n\nw" | fdisk "$DISK" &> /dev/null
    fi
  fi

  case "$FILE_SYSTEM" in
    btrfs|xfs) mkfs."$FILE_SYSTEM" -f "$ROOT_PART" &> /dev/null ;;
    *) mkfs."$FILE_SYSTEM" "$ROOT_PART" &> /dev/null ;;
  esac
  mount "$ROOT_PART" /mnt
  if [ $? -eq 0 ]; then
    mounted=true
  fi
  if $UEFI; then
    mkdir /mnt/boot
    mount "$BOOT_PART" /mnt/boot
  fi
}

# Partition the selected disk and configure LVM
create_lvm_layout() {
  if $UEFI; then
    BOOT_PART="${DISK}${PREFIX}1"
    ROOT_PART="${DISK}${PREFIX}2"
    sgdisk -n 1:0:+512M -n 2:0:0 -t 1:ef00 -t 2:8e00 "$DISK" &> /dev/null
    mkfs.fat -F32 "$BOOT_PART" &> /dev/null
  else
    ROOT_PART="${DISK}${PREFIX}1"
    echo -e "n\np\n1\n\n\nt\n8e\nw" | fdisk "$DISK" &> /dev/null
  fi

  dialog --infobox "Configuring LVM on $ROOT_PART..." 3 50
  pvcreate -y "$ROOT_PART" &> /dev/null
  vgcreate -y "$LVM_GROUP" "$ROOT_PART" &> /dev/null
  if $swap_enabled; then
    lvcreate -y -L "$SWAP" "$LVM_GROUP" -n "$LVM_SWAP" &> /dev/null
    lvcreate -y -l 100%FREE "$LVM_GROUP" -n "$LVM_ROOT" &> /dev/null
    mkswap "/dev/${LVM_GROUP}/${LVM_SWAP}" &> /dev/null
    swapon "/dev/${LVM_GROUP}/${LVM_SWAP}"
  else
    lvcreate -y -l 100%FREE "$LVM_GROUP" -n "$LVM_ROOT" &> /dev/null
  fi

  case "$FILE_SYSTEM" in
    btrfs|xfs) mkfs."$FILE_SYSTEM" -f "/dev/${LVM_GROUP}/${LVM_ROOT}" &> /dev/null ;;
    *) mkfs."$FILE_SYSTEM" "/dev/${LVM_GROUP}/${LVM_ROOT}" &> /dev/null ;;
  esac
  mount "/dev/${LVM_GROUP}/${LVM_ROOT}" /mnt
  if [ $? -eq 0 ]; then
    mounted=true
  fi
  if $UEFI; then
    mkdir /mnt/boot
    mount "$BOOT_PART" /mnt/boot
  fi
}

# Partition the selected disk and set up root disk encryption (LVM on LUKS)
create_encrypted_layout() {
  # /boot is left unencrypted
  BOOT_PART="${DISK}${PREFIX}1"
  ROOT_PART="${DISK}${PREFIX}2"
  if $UEFI; then
    sgdisk -n 1:0:+512M -n 2:0:0 -t 1:ef00 -t 2:8e00 "$DISK" &> /dev/null
    mkfs.fat -F32 "$BOOT_PART" &> /dev/null
  else
    echo -e "n\np\n1\n\n+512M\nn\np\n2\n\n\nt\n2\n8e\nw" | fdisk "$DISK" &> /dev/null
    mkfs.ext4 "$BOOT_PART" &> /dev/null
  fi

  inputs_match=false
  while ! $inputs_match; do
    input=$(dialog --title "Encrypt $ROOT_PART" --clear --stdout \
      --insecure --passwordbox "Enter a passphrase to encrypt \
$ROOT_PART.\n\nThe overall strength of the encryption process depends \
strongly on this passphrase, therefore you should set a passphrase that is \
not easy to guess.\n\nNote that the passphrase you enter will be required \
each time on boot.\n\nEncryption passphrase:" 15 80)

    if [ $? -eq 0 ]; then
      confirm_input=$(dialog --title "Encrypt $ROOT_PART" --clear --stdout \
        --insecure --passwordbox "Re-enter passphrase to verify:" 8 55)

      if [ -z "$input" ]; then
        dialog --title "ERROR: Empty Passphrase" \
          --msgbox "You are not allowed to have an empty passphrase." 5 55
      elif [ "$input" != "$confirm_input" ]; then
        dialog --title "ERROR: Passphrases Do No Match" \
          --msgbox "The two passphrases you entered did not match." 5 55
      elif [ "${#input}" -lt 8 ]; then
        dialog --title "WARNING: Weak Passphrase" --defaultno \
          --yesno "The passphrase you entered is less than 8 characters which \
is considered insecure.\n\nContinue using a weak passphrase?"  8 60
        if [ $? -eq 0 ]; then
          inputs_match=true
        fi
      else
        inputs_match=true
      fi
    else
      dialog --title "Revert Partition Changes" --defaultno \
        --yesno "Are you sure you want to cancel the encryption \
process? If you choose yes, you will be returned to the partition menu." 7 65
      if [ $? -eq 0 ]; then
        prepare_disk
      fi
    fi
  done

  dialog --infobox "Encrypting $ROOT_PART..." 3 50
  printf "%s" "$input" | cryptsetup luksFormat "$ROOT_PART" - &> /dev/null
  printf "%s" "$input" | cryptsetup open "$ROOT_PART" "$CRYPT_DEVICE_NAME" -
  dialog --infobox "Configuring LVM on $ROOT_PART..." 3 50
  pvcreate -y "/dev/mapper/${CRYPT_DEVICE_NAME}" &> /dev/null
  vgcreate -y "$LVM_GROUP" "/dev/mapper/${CRYPT_DEVICE_NAME}" &> /dev/null

  if $swap_enabled; then
    lvcreate -y -L "$SWAP" "$LVM_GROUP" -n "$LVM_SWAP" &> /dev/null
    lvcreate -y -l 100%FREE "$LVM_GROUP" -n "$LVM_ROOT" &> /dev/null
    mkswap "/dev/mapper/${LVM_GROUP}-${LVM_SWAP}" &> /dev/null
    swapon "/dev/mapper/${LVM_GROUP}-${LVM_SWAP}"
  else
    lvcreate -y -l 100%FREE "$LVM_GROUP" -n "$LVM_ROOT" &> /dev/null
  fi

  case "$FILE_SYSTEM" in
    btrfs|xfs) mkfs."$FILE_SYSTEM" -f "/dev/mapper/${LVM_GROUP}-${LVM_ROOT}" &> /dev/null ;;
    *) mkfs."$FILE_SYSTEM" "/dev/mapper/${LVM_GROUP}-${LVM_ROOT}" &> /dev/null ;;
  esac
  mount "/dev/mapper/${LVM_GROUP}-${LVM_ROOT}" /mnt
  if [ $? -eq 0 ]; then
    mounted=true
  fi
  mkdir /mnt/boot
  mount "$BOOT_PART" /mnt/boot
}

# Use the reflector script to update the pacman mirror list
update_mirrorlist() {
  reflector --latest 2 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
}

# Prompt the user to install the base packages for the system
configure_install() {
  bluetooth_enabled=true
  dm_enabled=false
  multilib=false
  DESKTOP_PACKAGES=()

  if $UEFI; then
    DESKTOP_PACKAGES+=('efibootmgr')
  fi

  if [ "$PARTITION_LAYOUT" = "LVM" ]; then
    DESKTOP_PACKAGES+=('lvm2')
  elif [ "$PARTITION_LAYOUT" = "Encrypted" ]; then
    DESKTOP_PACKAGES+=('lvm2' 'cryptsetup')
  fi

  if [ "$FILE_SYSTEM" = "btrfs" ]; then
    DESKTOP_PACKAGES+=('btrfs-progs')
  elif [ "$FILE_SYSTEM" = "xfs" ]; then
    DESKTOP_PACKAGES+=('xfsprogs')
  fi

  multilib=true
  
  
    case "$GUI" in
      "GNOME") DESKTOP_PACKAGES+=('gnome')
               DESKTOP_PACKAGES+=('gnome-extra')
               DESKTOP_PACKAGES+=('network-manager-applet' 'gnome-keyring')
               DESKTOP_PACKAGES+=('gnome-bluetooth')
               DESKTOP_PACKAGES+=('gdm')
               xinit_config="exec gnome-session"
               DM="gdm"
               ;;
      "KDE Plasma") DESKTOP_PACKAGES+=('plasma')
                    DESKTOP_PACKAGES+=('kde-applications')
                    DESKTOP_PACKAGES+=('plasma-nm')
                    DESKTOP_PACKAGES+=('bluedevil')
                    DESKTOP_PACKAGES+=('sddm')
                    xinit_config="exec startkde"
                    DM="sddm"
                    ;;
      "Xfce") DESKTOP_PACKAGES+=('xfce4')
              DESKTOP_PACKAGES+=('xfce4-goodies')
              DESKTOP_PACKAGES+=('lightdm' 'lightdm-gtk-greeter' 'lightdm-gtk-greeter-settings')
              xinit_config="exec startxfce4"
              DM="lightdm"
              ;;
    esac

    DESKTOP_PACKAGES+=('bluez' 'bluez-utils' 'pulseaudio-bluetooth')
    dm_enabled=true
     
    # Intel/AMD/NVIDIA drivers are not installed on virtual machines
    if [ "$hypervisor" = "none" ]; then
      if lspci | grep "VGA" | grep -iq "Intel"; then
        DESKTOP_PACKAGES+=('xf86-video-intel')
      fi

      if lspci | grep "VGA" | grep -iq "NVIDIA"; then
        gpu_driver="NVIDIA" 
        if [ "$gpu_driver" = "NVIDIA" ]; then
          # Get only the GPU PCI device ID
          gpu_pci_id=$(lspci -nn  | grep -ioP 'VGA.*NVIDIA.*\[\K[\w:]+' | sed 's/.*://')
          # Automatically install the correct driver based on the PCI ID data
          if grep -Fq "$gpu_pci_id" "$DIR"/etc/nvidia_390_pci_ids; then
            DESKTOP_PACKAGES+=('nvidia-390xx' 'nvidia-390xx-utils' 'nvidia-390xx-settings')
          elif grep -Fq "$gpu_pci_id" "$DIR"/etc/nvidia_340_pci_ids; then
            # Support for nvidia-340xx has been dropped, use nouveau
            DESKTOP_PACKAGES+=('xf86-video-nouveau' 'mesa')
          else
            DESKTOP_PACKAGES+=('nvidia' 'nvidia-utils' 'nvidia-settings')
          fi
        else
          DESKTOP_PACKAGES+=('xf86-video-nouveau' 'mesa')
        fi
      elif lspci | grep "VGA" | grep -q "ATI\|AMD"; then
        gpu_driver="ATI" 
        DESKTOP_PACKAGES+=('xf86-video-ati' 'mesa')
      fi
    else
      case "$hypervisor" in
        "vmware") DESKTOP_PACKAGES+=('open-vm-tools' 'xf86-video-vmware' 'xf86-input-vmmouse' 'mesa' 'gtkmm' 'gtkmm3') ;;
        "oracle") DESKTOP_PACKAGES+=('virtualbox-guest-utils' 'virtualbox-guest-dkms') ;;
        "parallels") DESKTOP_PACKAGES+=('xf86-video-vesa') ;;
        *) DESKTOP_PACKAGES+=('xf86-video-fbdev') ;;
      esac
    fi
}

install_base() {
  while true; do
    dialog --title "Installation Summary" \
      --yesno "The base system is ready to be installed on $DISK.\nThe \
following packages will be installed:\n\n${BASE_PACKAGES[*]} \
${BASE_ESSENTIALS[*]} ${DESKTOP_PACKAGES[*]}\n\nInstall Arch Linux?" 0 0
    if [ $? -eq 0 ]; then
      clear
      pacstrap /mnt "${BASE_PACKAGES[@]}" "${BASE_ESSENTIALS[@]}" "${DESKTOP_PACKAGES[@]}"
      if [ $? -eq 0 ]; then
        installed=true
      else
        dialog --title "ERROR: Install Failed" \
          --msgbox "Arch Linux failed to install on $DISK.\n\nThe installer \
encountered an error while executing pacstrap." 7 65
        reset ; exit 1
      fi
      break
    else
      dialog --title "Cancel Installation" \
        --yesno "Are you sure you want to exit to the main menu?" 5 55
      if [ $? -eq 0 ]; then
        main_menu
      fi
    fi
  done
}

# Apply the user's system settings
configure_system() {
  dialog --infobox "Generating the fstab file..." 3 50
  # Generate the fstab file
  genfstab -U -p /mnt >> /mnt/etc/fstab

  dialog --infobox "Adjusting time zone and system clock..." 3 50
  # Set the time zone and adjust the hardware clock to the system time (UTC)
  ln -sf /usr/share/zoneinfo/"$ZONE" /mnt/etc/localtime
  if $utc_enabled; then
    arch-chroot /mnt hwclock --systohc --utc
  else
    arch-chroot /mnt hwclock --systohc --localtime
  fi

  dialog --infobox "Generating locales..." 3 50
  # Set locale and keyboard layout if applicable and generate the locales
  sed -i "s/#en_US.UTF-8/en_US.UTF-8/" /mnt/etc/locale.gen
  if [ "$LOCALE" != "en_US.UTF-8" ]; then
    sed -i "s/#$LOCALE/$LOCALE/" /mnt/etc/locale.gen
  fi
  echo "LANG=$LOCALE" > /mnt/etc/locale.conf
  if [ "$KEYMAP" != "us" ]; then
    echo "KEYMAP=$KEYMAP" > /mnt/etc/vconsole.conf
    if [ "$DESKTOP" != "None" ]; then
        echo -e "Section \"InputClass\"\nIdentifier \"system-keyboard\"\nMatchIsKeyboard \"on\"\nOption \"XkbLayout\" \"$KEYMAP\"\nEndSection" > /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
    fi
  fi
  arch-chroot /mnt locale-gen &> /dev/null

  dialog --infobox "Configuring system hostname..." 3 50
  # Set the hostname and add a matching entry to /etc/hosts
  echo "$HOST_NAME" > /mnt/etc/hostname
  echo -e "127.0.0.1\tlocalhost\n::1\t\tlocalhost\n127.0.1.1\t$HOST_NAME.localdomain\t$HOST_NAME" >> /mnt/etc/hosts

  # Modify mkinitcpio.conf hooks if required and generate a new initramfs
  if [ "$PARTITION_LAYOUT" != "Basic" ]; then
    dialog --infobox "Recreating the initramfs image..." 3 50
    if [ "$PARTITION_LAYOUT" = "LVM" ]; then
      sed -i "s/HOOKS=.*/HOOKS=(base udev autodetect modconf block lvm2 filesystems fsck)/" /mnt/etc/mkinitcpio.conf
    elif [ "$PARTITION_LAYOUT" = "Encrypted" ]; then
      sed -i "s/HOOKS=.*/HOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems fsck)/" /mnt/etc/mkinitcpio.conf
    fi
    arch-chroot /mnt mkinitcpio -p linux &> /dev/null
  fi

  dialog --infobox "Installing GRUB to $DISK..." 3 50
  # Append the required kernel parameters to unlock an encrypted partition
  if [ "$PARTITION_LAYOUT" = "Encrypted" ]; then
    root_part_uuid=$(blkid -s UUID -o value "$ROOT_PART")
    sed -i "s/GRUB_CMDLINE_LINUX=\"\(.*\)\"/GRUB_CMDLINE_LINUX=\"\1 cryptdevice=UUID=$root_part_uuid:$CRYPT_DEVICE_NAME root=\/dev\/mapper\/$LVM_GROUP-$LVM_ROOT\"/" /mnt/etc/default/grub
  fi

  # Remove the 'quiet' parameter to have a verbose output during boot
  sed -i 's/\(GRUB_CMDLINE_LINUX_DEFAULT=\).*/\1\"\"/g' /mnt/etc/default/grub

  # Install GRUB to the target disk and generate the main configuration file
  if $UEFI; then
    arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB &> /dev/null
  else
    arch-chroot /mnt grub-install --target=i386-pc "$DISK" &> /dev/null
  fi
  dialog --infobox "Generating the GRUB configuration file..." 3 50
  arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg &> /dev/null

  dialog --infobox "Configuring user accounts..." 3 50
  # Set the root password and create a user account
  arch-chroot /mnt chpasswd <<<"root:$root_passwd"
  # User is added to the 'wheel' group and is granted root privileges with sudo
  if [ -z "$FULL_NAME" ]; then
    arch-chroot /mnt useradd -m -g users -G wheel -s /bin/bash "$USER_NAME"
  else
    arch-chroot /mnt useradd -m -g users -G wheel -c "$FULL_NAME" -s /bin/bash "$USER_NAME"
  fi
  arch-chroot /mnt chpasswd <<<"$USER_NAME:$user_passwd"
  sed -i 's/# %wheel ALL=(ALL) ALL$/%wheel ALL=(ALL) ALL/' /mnt/etc/sudoers

  # Uncomment multilib in pacman.conf and refresh the database
  if $multilib; then
    sed -i "/\[multilib\]/,/Include/"'s/^#//' /mnt/etc/pacman.conf
    dialog --infobox "Refreshing pacman database..." 3 50
    arch-chroot /mnt pacman -Sy &> /dev/null
  fi

  dialog --infobox "Enabling NetworkManager service..." 3 50
  arch-chroot /mnt systemctl enable NetworkManager.service &> /dev/null

  if $bluetooth_enabled; then
    dialog --infobox "Enabling Bluetooth service..." 3 50
    arch-chroot /mnt systemctl enable bluetooth.service &> /dev/null
  fi

  # xinitrc is created in user's home directory if display manager is not set
  if [ "$DESKTOP" != "None" ] && ! $dm_enabled; then
    dialog --infobox "Generating the xinitrc file..." 3 50
    echo "$xinit_config" > /mnt/home/"$USER_NAME"/.xinitrc
  elif $dm_enabled; then
    dialog --infobox "Enabling display manager service..." 3 50
    arch-chroot /mnt systemctl enable "$DM".service &> /dev/null
  fi

  if [ "$hypervisor" != "none" ]; then
    if [ "$hypervisor" = "oracle" ]; then
      dialog --infobox "Enabling VirtualBox modules..." 3 50
      arch-chroot /mnt systemctl enable vboxservice.service &> /dev/null
    elif [ "$hypervisor" = "vmware" ]; then
      dialog --infobox "Enabling VMware Open-VM-Tools..." 3 50
      arch-chroot /mnt systemctl enable vmtoolsd.service &> /dev/null
      arch-chroot /mnt systemctl enable vmware-vmblock-fuse.service &> /dev/null
    fi
  fi
}

# System power menu
reboot_system() {
  if $installed; then
    while true; do
      choice=$(dialog --title "Reboot System" --nocancel \
        --menu "Arch Linux has finished installing.\nYou must restart your \
system to boot Arch.\n\nPlease select one of the following options:" 13 60 3 \
"Reboot" "Reboot system" \
"Poweroff" "Poweroff system" \
"Exit" "Unmount system and exit to CLI" 3>&1 1>&2 2>&3)

      dialog --infobox "Unmounting partitions on /mnt..." 3 50
      umount -R /mnt
      case "$choice" in
        "Reboot") reset ; reboot ; exit ;;
        "Poweroff") reset ; poweroff ; exit ;;
        "Exit") reset ; exit ;;
      esac
    done
  else
    dialog --title "Reboot System" \
      --yesno "The installation is incomplete.\n\nAre you sure you want to \
reboot your system?" 7 60
    if [ $? -eq 0 ]; then
      check_mountpoints
      reset ; reboot ; exit
    fi
  fi
}

# Menu which allows the user to navigate the installer
main_menu() {
  while true; do
    choice=$(dialog --title "Main Menu" --nocancel \
      --menu "Select an option below using the UP/DOWN keys and SPACE or \
ENTER.\nAlternate keys may also be used: '+', '-', and TAB." 19 70 11 \
"KEYMAP" "Set the keyboard layout" \
"LOCALE" "Set the system locale" \
"TIMEZONE" "Set the system time zone" \
"HOSTNAME" "Set the system's hostname" \
"ROOT PASSWORD" "Set the root password" \
"CREATE USER" "Create your user account" \
"PARTITION" "Partition the installation drive" \
"UPDATE MIRRORS" "Update the pacman mirror list" \
"INSTALL" "Install Arch Linux" \
"REBOOT" "Reboot system" \
"EXIT" "Exit Arch Linux Installer" 3>&1 1>&2 2>&3)

    case "$choice" in
      "KEYMAP") set_keymap ;;
      "LOCALE") set_locale ;;
      "TIMEZONE") set_timezone ;;
      "HOSTNAME") set_hostname ;;
      "ROOT PASSWORD") set_root_passwd ;;
      "CREATE USER") create_user ;;
      "PARTITION") if $mounted; then
                     dialog --title "Partition the Disks" \
                       --yesno "A disk is mounted on the system and ready for \
installation.\n\nAre you sure you want to return to partitioning?" 7 70
                     if [ $? -eq 0 ]; then
                       mounted=false
                       prepare_disk
                     fi
                   else
                    prepare_disk
                   fi
                   ;;
      "UPDATE MIRRORS") update_mirrorlist ;;
      "INSTALL") if $mounted; then
                   configure_install
                   install_base
                   configure_system
                   reboot_system
                 else
                   dialog --title "ERROR: No Filesytem Mounted" \
                     --yesno "The installer was unable to detect a \
mounted filesystem.\n\nReturn to partitioning?" 7 60
                   if [ $? -eq 0 ]; then
                     prepare_disk
                   fi
                 fi
                 ;;
      "REBOOT") reboot_system ;;
      "EXIT") reset ; exit ;;
    esac
  done
}

main() {
  init
  check_connection
  set_keymap
  set_locale
  set_timezone
  prepare_disk
  update_mirrorlist
  configure_install
  #install_base
  #configure_system
  #reboot_system
}

main
